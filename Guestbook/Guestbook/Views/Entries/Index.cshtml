@model PaginatedList<DataAccessLayer.Entities.Entry>

@{
    ViewData["Title"] = "Entries";
}

<h1>Entries</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form id="filter" asp-action="Index" method="get">
    <p>
        Find by phrase: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
        <input type="submit" value="Filter" class="btn btn-default" />
        <a asp-action="Index">Back to Full List</a>
    </p>
    Page Size:
    <select id="pageSize" name="pageSize">
        <option value="5">5</option>
        <option value="10">10</option>
        <option value="25">25</option>
    </select>
    | Go to page
    <input id="pageNumber" name="pageNumber" type="number" min="1" max="@Model.TotalPages" class="" />
    <input type="submit" value="Go" class="btn btn-default" />
    <p>
        @Model.Count from @Model.TotalItems | page @ViewData["CurrentPageNumber"] / @Model.TotalPages
    </p>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                Name
            </th>
            <th>
                Email
            </th>
            <th>
                Comment
            </th>
            <th>
                Entry time
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Comment)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EntryTime)
                </td>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageNumber - 1)"
   asp-route-searchString="@ViewData["CurrentFilter"]"
   asp-route-pageSize="@ViewData["CurrentPageSize"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-pageNumber="@(Model.PageNumber + 1)"
   asp-route-searchString="@ViewData["CurrentFilter"]"
   asp-route-pageSize="@ViewData["CurrentPageSize"]"
   class="btn btn-default @nextDisabled">
    Next
</a>

<script type="text/javascript">
    document.querySelector('#pageSize option[value="@ViewData["CurrentPageSize"]"]').setAttribute("selected", "selected");
    document.getElementById("pageSize").onchange = function() {
        document.getElementById("filter").submit()
    }
</script>